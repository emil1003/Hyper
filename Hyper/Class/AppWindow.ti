--[[
	Class that wraps "Window", and puts a Terminal inside it.
]]
class "AppWindow" extends "Window" {
	isCSD = false;
}

--[[
	@constructor
	@desc Setup Terminal view and init Window
	@param <table - structure>*
]]
function AppWindow:__init__(...)
	self:resolve(...)

	self.termSurface = Terminal():set({
		id = "TermSurface",
		X = 1,
		Y = 1,
		width = "$parent.width",
		height = "$parent.height"
	})

	self:super(...)
	self.content:addNode(self.termSurface)

	self:queryRaw("#titlebar > #close"):off("trigger")

	self:queryRaw("#titlebar > #close"):on("trigger", function()
		self.termSurface:resume(GenericEvent("terminate"))
		self:remove()
	end)

	self.titleBar = not isCSD

	self:watchProperty("width", function()
		self:onResize()
	end)
end

--[[
	@instance
	@desc After init, pass the chunk to termSurface
]]
function AppWindow:__postInit__()
	self.super:__postInit__()

	if self.chunk then
		self.termSurface:setChunk(self.chunk)
	end
end

--[[
	@setter
	@desc Load a chunk into termSurface after init
	@param <string - path>
	@param <function - chunk>
]]
function AppWindow:setChunk(val)
	if type(val) == "string" then
		if fs.exists(val) then
			local state, res = pcall(loadfile, val)
			if state then
				self.chunk = res
			else
				error("Failed to load "..val..": "..res)
			end
		else
			-- Loading chunks from strings isn't supported
			error("File not found: "..val)
		end
	elseif type(val) == "function" then
		self.chunk = val
	else
		error("Expected string or function, got "..type(val))
	end
	self.termSurface:setChunk(self.chunk)
end

--[[
	@setter
	@desc Sets if program provides decorations
	@param <boolean - isCSD>
]]
function AppWindow:setCSD(doCSD)
	self.isCSD = doCSD
	self.titleBar = not isCSD
	-- May not be useful here, since parent hasn't had a chance to redraw
	self:onResize()
	self.changed = true
end

--[[
	@instance
	@desc When resized, termSurface is resumed with a "term_resize" event
]]
function AppWindow:onResize()
	self.termSurface:resume(GenericEvent("term_resize"))
end

configureConstructor {
	orderedArguments = {"X", "Y", "width", "height"}
}
